// The N-th root of an integer
#include <bits/stdc++.h>
using namespace std;
double multiply(double number, int n) {
    double ans = 1.0;
    for(int i = 1;i<=n;i++) {
        ans = ans * number;
    }
    return ans; 
}

void getNthRoot(int n, int m) {
    double low = 1;
    double high = m;
    double eps = 1e-6; 

    while((high - low) > eps) {
        double mid = (low + high) / 2.0; 
        if(multiply(mid, n) < m) {
            low = mid; 
        }
        else {
            high = mid; 
        }
    }

    cout <<n<<"th root of "<<m<<" is "<<low<<endl; 

}
int main() {
	int n=3, m=27; 
	getNthRoot(n, m); 
	return 0;
}
// Find the element that appears once in a sorted array, and the rest element appears twice (Binary search)
using namespace std;
class Solution {
    public:
        int findSingleElement(vector < int > & nums) {

            int n = nums.size();
            int elem = 0;
            for (int i = 0; i < n; i++) {
                elem = elem ^ nums[i];
            }

            return elem;
        }
};

int main() {
    Solution obj;
    vector < int > v {1,1,2,3,3,4,4,8,8};

    int elem = obj.findSingleElement(v);

    cout << "The single occurring element is " 
         << elem << endl;
}
// Search element in a sorted and rotated array/ find pivot where it is rotated
#include<bits/stdc++.h>
using namespace std;

int search(vector<int>& nums,int target) {
    for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target)
            return i;
    }
    return -1;

}

int main() {
    vector<int> nums = {4,5,6,7,0,1,2,3};
    int target = 3;
    cout<<"The index in which the target is present is "<<search(nums,target);

    return 0;
}
// 
#include<bits/stdc++.h>
using namespace std;

int search(vector<int>& nums,int target) {
    for(int i=0;i<nums.size();i++)
    {
        if(nums[i]==target)
            return i;
    }
    return -1;

}

int main() {
    vector<int> nums = {4,5,6,7,0,1,2,3};
    int target = 3;
    cout<<"The index in which the target is present is "<<search(nums,target);

    return 0;
}

// Find the element that appears once in a sorted array, and the rest element appears twice (Binary search)

#include<bits/stdc++.h>

using namespace std;
class Solution {
    public:
        int findSingleElement(vector < int > & nums) {

            int n = nums.size();
            int elem = 0;
            for (int i = 0; i < n; i++) {
                elem = elem ^ nums[i];
            }

            return elem;
        }
};

int main() {
    Solution obj;
    vector < int > v {1,1,2,3,3,4,4,8,8};

    int elem = obj.findSingleElement(v);

    cout << "The single occurring element is " 
         << elem << endl;
}
