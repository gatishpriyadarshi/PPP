// Find intersection point of Y LinkedList
int length(Node* head){

   int count = 0;



   while(head!=NULL){

       count++;

       head = head->next;

   }

   return count;

}



int findIntersection(Node *firstHead, Node *secondHead){



   if(firstHead == NULL || secondHead == NULL) return -1;



   Node* temp1 = firstHead;

   Node* temp2 = secondHead;



   int l1 = length(temp1);

   int l2 = length(temp2);



   if(l1-l2 < 0){

       int diff = l2-l1;

       while(diff--) temp2 = temp2->next;

   }

   else{

       int diff = l1-l2;

       while(diff--) temp1 = temp1->next;

   }



   while(temp1!=temp2 && temp1->next!=NULL && temp2->next!=NULL){



       temp1 = temp1->next;

       temp2 = temp2->next;



   }



   if(temp1 == temp2) return temp1->data;

   else return -1;

}



 // Detect a cycle in Linked List

 #include<bits/stdc++.h>
using namespace std;

class node {
    public:
        int num;
        node* next;
        node(int val) {
            num = val;
            next = NULL;
        }
};

//utility function to insert node in the list
void insertNode(node* &head,int val) {
    node* newNode = new node(val);

    if(head == NULL) {
        head = newNode;
        return;
    }

    node* temp = head;
    while(temp->next != NULL) temp = temp->next;

    temp->next = newNode;
    return;
}

//utility function to create cycle
void createCycle(node* &head,int a,int b) {
    int cnta = 0,cntb = 0;
    node* p1 = head;
    node* p2 = head;
    while(cnta != a || cntb != b) {
        if(cnta != a) p1 = p1->next, ++cnta;
        if(cntb != b) p2 = p2->next, ++cntb;
    }
    p2->next = p1;
}

//utility function to detect cycle
bool cycleDetect(node* head) {
    unordered_set<node*> hashTable;
    while(head != NULL) {
        if(hashTable.find(head) != hashTable.end()) return true;
        hashTable.insert(head);
        head = head->next;
    }
    return false;
}

int main() {
    node* head = NULL;
    insertNode(head,1);
    insertNode(head,2);
    insertNode(head,3);
    insertNode(head,4);
    createCycle(head,1,3);//creating cycle in the list
    if(cycleDetect(head) == true)
    cout<<"Cycle detected\n";
    else
    cout<<"Cycle not detected\n";
    return 0;
}
